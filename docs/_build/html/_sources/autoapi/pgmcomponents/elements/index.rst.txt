:py:mod:`pgmcomponents.elements`
================================

.. py:module:: pgmcomponents.elements


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   grating/index.rst
   mirror/index.rst
   pgm/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pgmcomponents.elements.Point3D
   pgmcomponents.elements.Vector3D
   pgmcomponents.elements.Plane
   pgmcomponents.elements.Ray3D
   pgmcomponents.elements.Plane_Mirror
   pgmcomponents.elements.Point3D
   pgmcomponents.elements.Plane
   pgmcomponents.elements.Ray3D
   pgmcomponents.elements.Vector3D
   pgmcomponents.elements.Grating




.. py:class:: Point3D(x, y, z)


   Bases: :py:obj:`object`

   A class for a simple 3D point.

   :param x: The x coordinate of the point
   :type x: float
   :param y: The y coordinate of the point
   :type y: float
   :param z: The z coordinate of the point
   :type z: float

   .. method:: __repr__ : str

      Returns a string representation of the point

   .. method:: __add__ : Point3D

      Adds two points together

   .. method:: __sub__ : Point3D

      Subtracts two points

   .. method:: __eq__ : bool

      Checks if two points are equal

   .. method:: __ne__ : bool

      Checks if two points are not equal

   .. method:: __getitem__ : float

      Returns the x, y or z coordinate of the point

   .. method:: __setitem__ : float

      Sets the x, y or z coordinate of the point

   .. method:: __iter__ : float

      Returns an iterator over the point

   .. method:: __len__ : int

      Returns the length of the point

   .. method:: __hash__ : int

      Returns the hash of the point

   .. method:: __copy__ : Point3D

      Returns a copy of the point

   .. method:: __deepcopy__ : Point3D

      Returns a deep copy of the point

   .. method:: copy : Point3D

      Returns a copy of the point

   .. method:: distance : float

      Finds the distance between two points


   .. py:property:: x


   .. py:property:: y


   .. py:property:: z


   .. py:property:: list


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __add__(other)


   .. py:method:: __sub__(other)


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __ne__(other)

      Return self!=value.


   .. py:method:: __getitem__(key)


   .. py:method:: __setitem__(key, value)


   .. py:method:: __iter__()


   .. py:method:: __len__()


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __copy__()


   .. py:method:: __deepcopy__(memo)


   .. py:method:: copy()


   .. py:method:: distance(other)



.. py:class:: Vector3D(x, y, z)


   Bases: :py:obj:`object`

   A class for a simple 3D vector

   :param x:
   :type x: float
   :param The x component of the vector:
   :param y:
   :type y: float
   :param The y component of the vector:
   :param z:
   :type z: float
   :param The z component of the vector:
   :param Methods:
   :param ----------:
   :param __repr__:
   :type __repr__: str
   :param Returns a string representation of the vector:
   :param __add__:
   :type __add__: Vector3D
   :param Adds two vectors together:
   :param __sub__:
   :type __sub__: Vector3D
   :param Subtracts two vectors:
   :param __mul__:
   :type __mul__: Vector3D
   :param Finds the dot product of two vectors:
   :param __div__:
   :type __div__: Vector3D
   :param Finds the cross product of two vectors:
   :param __abs__:
   :type __abs__: float
   :param Finds the magnitude of the vector:
   :param __neg__:
   :type __neg__: Vector3D
   :param Finds the negative of the vector:
   :param __eq__:
   :type __eq__: bool
   :param Checks if two vectors are equal:
   :param __ne__:
   :type __ne__: bool
   :param Checks if two vectors are not equal:
   :param __getitem__:
   :type __getitem__: float
   :param Returns the x:
   :param y or z component of the vector:
   :param __setitem__:
   :type __setitem__: float
   :param Sets the x:
   :param y or z component of the vector:
   :param __iter__:
   :type __iter__: float
   :param Returns an iterator over the vector:
   :param __len__:
   :type __len__: int
   :param Returns the length of the vector:
   :param __hash__:
   :type __hash__: int
   :param Returns the hash of the vector:
   :param __copy__:
   :type __copy__: Vector3D
   :param Returns a copy of the vector:
   :param __deepcopy__:
   :type __deepcopy__: Vector3D
   :param Returns a deep copy of the vector:
   :param copy:
   :type copy: Vector3D
   :param Returns a copy of the vector:
   :param dot:
   :type dot: float
   :param Finds the dot product of two vectors:
   :param cross:
   :type cross: Vector3D
   :param Finds the cross product of two vectors:
   :param norm:
   :type norm: float
   :param Finds the magnitude of the vector:
   :param normalize:
   :type normalize: Vector3D
   :param Normalizes the vector:
   :param angle:
   :type angle: float
   :param Finds the angle between two vectors:
   :param rotate:
   :type rotate: Vector3D
   :param Rotates the vector around an axis:
   :param rotate_x:
   :type rotate_x: Vector3D
   :param Rotates the vector around the x axis:
   :param rotate_y:
   :type rotate_y: Vector3D
   :param Rotates the vector around the y axis:
   :param rotate_z:
   :type rotate_z: Vector3D
   :param Rotates the vector around the z axis:

   .. py:property:: x


   .. py:property:: y


   .. py:property:: z


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __add__(other)


   .. py:method:: __sub__(other)


   .. py:method:: __mul__(other)


   .. py:method:: __div__(other)


   .. py:method:: __abs__()


   .. py:method:: __neg__()


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __ne__(other)

      Return self!=value.


   .. py:method:: __getitem__(key)


   .. py:method:: __setitem__(key, value)


   .. py:method:: __iter__()


   .. py:method:: __len__()


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __copy__()


   .. py:method:: __deepcopy__(memo)


   .. py:method:: copy()


   .. py:method:: dot(other)


   .. py:method:: cross(other)


   .. py:method:: norm()


   .. py:method:: normalize()


   .. py:method:: angle(other)


   .. py:method:: rotate(axis, angle)


   .. py:method:: rotate_x(angle)


   .. py:method:: rotate_y(angle)


   .. py:method:: rotate_z(angle)



.. py:class:: Plane(*args)


   Bases: :py:obj:`object`

   A class for a simple plane

   Based on the work of Matthew Hand

   :param \*args: Either a point and a normal vector, or three points defining the plane, np.array_like

   .. attribute:: point

      A point on the plane

      :type: array_like

   .. attribute:: normal

      The normal vector of the plane

      :type: array_like

   .. method:: __repr__ : str

      Returns a string representation of the plane

   .. method:: __eq__ : bool

      Checks if two planes are equal

   .. method:: intersectQ : bool

      Checks if the plane intersects another plane or ray3d

   .. py:property:: point


   .. py:property:: position


   .. py:property:: normal


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: intersectQ(other, atol=1e-06)

      Checks if the plane intersects another plane or ray3d

      :param other: The other plane or ray3d
      :type other: Plane or Ray3D
      :param atol: The absolute tolerance for the dot product of the normal vectors
      :type atol: float

      :returns: * *bool* -- True if the plane intersects the other plane or ray3d, False otherwise
                * *Point3D or None* -- The point of intersection if the plane intersects the other plane or ray3d, None otherwise



.. py:class:: Ray3D(position, vector)


   Bases: :py:obj:`object`

   A class for a simple 3D ray

   :param position: The position of the ray
   :type position: Point3D
   :param vector: The vector of the ray
   :type vector: Vector3D

   .. method:: __repr__ : str

      Returns a string representation of the ray


   .. attribute:: position

      The position of the ray

      :type: Point3D

   .. attribute:: vector

      The vector of the ray

      :type: Vector3D

   .. py:property:: position


   .. py:property:: vector


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: Plane_Mirror(voffset=20, hoffset=0, axis_voffset=0, axis_hoffset=0, dimensions=np.array([450, 70, 50]), theta=45, plane=Plane(), borders=np.array([0, 0, 0, 0]))


   Bases: :py:obj:`object`

   A class for a simple plane mirror.

   :param dimensions: The dimensions of the mirror in mm
   :type dimensions: array_like
   :param position: The position of the mirror
   :type position: Point3D
   :param normal: The normal vector of the mirror
   :type normal: Vector3D
   :param orientation:
   :type orientation: Vector3D

   .. attribute:: dimensions

      The dimensions of the mirror in mm

      :type: array_like

   .. attribute:: position

      The position of the mirror

      :type: Point3D

   .. attribute:: normal

      The normal vector of the mirror

      :type: Vector3D

   .. attribute:: orientation

      The orientation of the mirror

      :type: Vector3D

   .. attribute:: corners

      The corners of the grating in the global coordinate system:
      [bottom left back,
      bottom right back,
      bottom left front,
      bottom right front,
      top left back,
      top right back,
      top left front,
      top right front]

      :type: array_like

   .. attribute:: plane

      The plane of the mirror

      :type: Plane

   .. attribute:: borders

       Specifies the borders for a realistic plane mirror:
       borders : array_like
       Specifies the borders of a realistic grating component.
       |-----------Top------------|
       |                          |
      Left   Mirror Plane       Right
       |                          |       ---> +z direction
       |----------Bottom----------|
       [top, bottom, left, right]

      :type: array_like

   .. method:: set_position(position)

      Set the position of the mirror

   .. method:: set_normal(normal)

      Set the normal vector of the mirror

   .. method:: set_orientation(orientation)

      Set the orientation of the mirror

   .. method:: set_dimensions(*args)

      Set the dimensions of the mirror

   .. method:: set_offsets(voffset, hoffset, axis_voffset, axis_hoffset)

      Set the offsets of the mirror

   .. method:: compute_corners()

      Compute the corners of the mirror in the global coordinate system,

   .. py:property:: voffset


   .. py:property:: hoffset


   .. py:property:: axis_voffset


   .. py:property:: axis_hoffset


   .. py:property:: dimensions


   .. py:property:: plane


   .. py:property:: theta


   .. py:property:: corners


   .. py:property:: borders


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: read_file(filename)

      Read mirror parameters from a file.
      See config_pgm.ini for an example.
      A config_file may contain more than one sections, but only the
      mirror section will be read.

      :param filename: The name of the file to read from
      :type filename: str


   .. py:method:: set_position(position)


   .. py:method:: set_normal(normal)


   .. py:method:: set_dimensions(*args)

      Set the dimensions of the mirror.

      :param \*args: Either one or three arguments for the dimensions
      :type \*args: array_like

      :raises ValueError: If the number of arguments is not one or three


   .. py:method:: set_offsets(voffset, hoffset, axis_voffset, axis_hoffset)


   .. py:method:: compute_corners()

      Compute the corners of the mirror in the global coordinate system,
      in addition to the plane and normal of the mirror.


      :returns: **corners** -- The corners of the mirror in the global coordinate system
      :rtype: array_like


   .. py:method:: draw(ax)


   .. py:method:: mirror_from_file(filename)
      :classmethod:

      Create a mirror from a file.
      See config_pgm.ini for an example.
      A config_file may contain more than one sections, but only the
      mirror section will be read.

      :param filename: The name of the file to read from
      :type filename: str


   .. py:method:: reflect(*args)

      A method to reflect rays off the mirror.

      :param \*args: The rays to be reflected
      :type \*args: Ray3D

      :returns: **reflected_rays** -- A list of reflected rays
      :rtype: list



.. py:class:: Point3D(x, y, z)


   Bases: :py:obj:`object`

   A class for a simple 3D point.

   :param x: The x coordinate of the point
   :type x: float
   :param y: The y coordinate of the point
   :type y: float
   :param z: The z coordinate of the point
   :type z: float

   .. method:: __repr__ : str

      Returns a string representation of the point

   .. method:: __add__ : Point3D

      Adds two points together

   .. method:: __sub__ : Point3D

      Subtracts two points

   .. method:: __eq__ : bool

      Checks if two points are equal

   .. method:: __ne__ : bool

      Checks if two points are not equal

   .. method:: __getitem__ : float

      Returns the x, y or z coordinate of the point

   .. method:: __setitem__ : float

      Sets the x, y or z coordinate of the point

   .. method:: __iter__ : float

      Returns an iterator over the point

   .. method:: __len__ : int

      Returns the length of the point

   .. method:: __hash__ : int

      Returns the hash of the point

   .. method:: __copy__ : Point3D

      Returns a copy of the point

   .. method:: __deepcopy__ : Point3D

      Returns a deep copy of the point

   .. method:: copy : Point3D

      Returns a copy of the point

   .. method:: distance : float

      Finds the distance between two points


   .. py:property:: x


   .. py:property:: y


   .. py:property:: z


   .. py:property:: list


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __add__(other)


   .. py:method:: __sub__(other)


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __ne__(other)

      Return self!=value.


   .. py:method:: __getitem__(key)


   .. py:method:: __setitem__(key, value)


   .. py:method:: __iter__()


   .. py:method:: __len__()


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __copy__()


   .. py:method:: __deepcopy__(memo)


   .. py:method:: copy()


   .. py:method:: distance(other)



.. py:class:: Plane(*args)


   Bases: :py:obj:`object`

   A class for a simple plane

   Based on the work of Matthew Hand

   :param \*args: Either a point and a normal vector, or three points defining the plane, np.array_like

   .. attribute:: point

      A point on the plane

      :type: array_like

   .. attribute:: normal

      The normal vector of the plane

      :type: array_like

   .. method:: __repr__ : str

      Returns a string representation of the plane

   .. method:: __eq__ : bool

      Checks if two planes are equal

   .. method:: intersectQ : bool

      Checks if the plane intersects another plane or ray3d

   .. py:property:: point


   .. py:property:: position


   .. py:property:: normal


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: intersectQ(other, atol=1e-06)

      Checks if the plane intersects another plane or ray3d

      :param other: The other plane or ray3d
      :type other: Plane or Ray3D
      :param atol: The absolute tolerance for the dot product of the normal vectors
      :type atol: float

      :returns: * *bool* -- True if the plane intersects the other plane or ray3d, False otherwise
                * *Point3D or None* -- The point of intersection if the plane intersects the other plane or ray3d, None otherwise



.. py:class:: Ray3D(position, vector)


   Bases: :py:obj:`object`

   A class for a simple 3D ray

   :param position: The position of the ray
   :type position: Point3D
   :param vector: The vector of the ray
   :type vector: Vector3D

   .. method:: __repr__ : str

      Returns a string representation of the ray


   .. attribute:: position

      The position of the ray

      :type: Point3D

   .. attribute:: vector

      The vector of the ray

      :type: Vector3D

   .. py:property:: position


   .. py:property:: vector


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: Vector3D(x, y, z)


   Bases: :py:obj:`object`

   A class for a simple 3D vector

   :param x:
   :type x: float
   :param The x component of the vector:
   :param y:
   :type y: float
   :param The y component of the vector:
   :param z:
   :type z: float
   :param The z component of the vector:
   :param Methods:
   :param ----------:
   :param __repr__:
   :type __repr__: str
   :param Returns a string representation of the vector:
   :param __add__:
   :type __add__: Vector3D
   :param Adds two vectors together:
   :param __sub__:
   :type __sub__: Vector3D
   :param Subtracts two vectors:
   :param __mul__:
   :type __mul__: Vector3D
   :param Finds the dot product of two vectors:
   :param __div__:
   :type __div__: Vector3D
   :param Finds the cross product of two vectors:
   :param __abs__:
   :type __abs__: float
   :param Finds the magnitude of the vector:
   :param __neg__:
   :type __neg__: Vector3D
   :param Finds the negative of the vector:
   :param __eq__:
   :type __eq__: bool
   :param Checks if two vectors are equal:
   :param __ne__:
   :type __ne__: bool
   :param Checks if two vectors are not equal:
   :param __getitem__:
   :type __getitem__: float
   :param Returns the x:
   :param y or z component of the vector:
   :param __setitem__:
   :type __setitem__: float
   :param Sets the x:
   :param y or z component of the vector:
   :param __iter__:
   :type __iter__: float
   :param Returns an iterator over the vector:
   :param __len__:
   :type __len__: int
   :param Returns the length of the vector:
   :param __hash__:
   :type __hash__: int
   :param Returns the hash of the vector:
   :param __copy__:
   :type __copy__: Vector3D
   :param Returns a copy of the vector:
   :param __deepcopy__:
   :type __deepcopy__: Vector3D
   :param Returns a deep copy of the vector:
   :param copy:
   :type copy: Vector3D
   :param Returns a copy of the vector:
   :param dot:
   :type dot: float
   :param Finds the dot product of two vectors:
   :param cross:
   :type cross: Vector3D
   :param Finds the cross product of two vectors:
   :param norm:
   :type norm: float
   :param Finds the magnitude of the vector:
   :param normalize:
   :type normalize: Vector3D
   :param Normalizes the vector:
   :param angle:
   :type angle: float
   :param Finds the angle between two vectors:
   :param rotate:
   :type rotate: Vector3D
   :param Rotates the vector around an axis:
   :param rotate_x:
   :type rotate_x: Vector3D
   :param Rotates the vector around the x axis:
   :param rotate_y:
   :type rotate_y: Vector3D
   :param Rotates the vector around the y axis:
   :param rotate_z:
   :type rotate_z: Vector3D
   :param Rotates the vector around the z axis:

   .. py:property:: x


   .. py:property:: y


   .. py:property:: z


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __add__(other)


   .. py:method:: __sub__(other)


   .. py:method:: __mul__(other)


   .. py:method:: __div__(other)


   .. py:method:: __abs__()


   .. py:method:: __neg__()


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __ne__(other)

      Return self!=value.


   .. py:method:: __getitem__(key)


   .. py:method:: __setitem__(key, value)


   .. py:method:: __iter__()


   .. py:method:: __len__()


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __copy__()


   .. py:method:: __deepcopy__(memo)


   .. py:method:: copy()


   .. py:method:: dot(other)


   .. py:method:: cross(other)


   .. py:method:: norm()


   .. py:method:: normalize()


   .. py:method:: angle(other)


   .. py:method:: rotate(axis, angle)


   .. py:method:: rotate_x(angle)


   .. py:method:: rotate_y(angle)


   .. py:method:: rotate_z(angle)



.. py:class:: Grating(line_density=600, energy=250, cff=2, order=1, dimensions=np.array([1, 1, 1]), borders=np.array([0, 0, 0, 0]))


   Bases: :py:obj:`object`

   A class for a simple grating

   Based on the work of Matthew Hand

   :param line_density: The line density of the grating in lines per mm
   :type line_density: float
   :param energy: The energy of the incident beam in eV
   :type energy: float
   :param cff: The fixed focus constant of the grating
   :type cff: float
   :param order: The diffraction order of the grating
   :type order: int
   :param dimensions: The dimensions of the grating in mm [length, width, height],
                      dimensions are also accessible with lambda functions as:
                      self._length(), self._width(), self._height()
   :type dimensions: array_like

   .. attribute:: line_density

      The line density of the grating in lines per mm

      :type: float

   .. attribute:: energy

      The energy of the incident beam in eV

      :type: float

   .. attribute:: cff

      The fixed focus constant of the grating

      :type: float

   .. attribute:: order

      The diffraction order of the grating

      :type: int

   .. attribute:: alpha

      The incident angle of the beam in degrees

      :type: float

   .. attribute:: beta

      The diffraction angle of the beam in degrees

      :type: float

   .. attribute:: dimensions

      The dimensions of the grating in mm

      :type: array_like

   .. attribute:: corners

      The corners of the grating in the global coordinate system:
      [bottom left back,
      bottom right back,
      bottom left front,
      bottom right front,
      top left back,
      top right back,
      top left front,
      top right front]

      :type: array_like

   .. attribute:: borders

       Specifies the borders of a realistic grating component.
       |-----------Top------------|
       |                          |
      Left   Grating Plane      Right
       |                          |      ----> +z direction
       |----------Bottom----------|
       [top, bottom, left, right]

       Left - Right => Tangential
       Top - Bottom => Sagittal

      :type: array_like

   .. method:: set_angles(alpha, beta)

      Set the incident and diffraction angles of the grating

   .. method:: wavelength()

      Calculate the wavelength of the beam in Angstroms

   .. method:: compute_corners()

      Compute the corners of the grating in the global coordinate system

   .. method:: diffract(*args)

      A method to diffract rays off the grating

   .. method:: compute_beta(alpha, line_density, energy, order)

      Calculate the diffraction angle beta from the incident angle alpha

   .. method:: reflect(*args)

      A method to 'reflect' rays off the grating


   .. py:property:: line_density


   .. py:property:: energy


   .. py:property:: cff


   .. py:property:: order


   .. py:property:: alpha


   .. py:property:: beta


   .. py:property:: dimensions


   .. py:property:: plane


   .. py:property:: borders


   .. py:property:: corners


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: read_file(filename)

      Read grating parameters from a file.
      See config_pgm.ini for an example.
      A config_file may contain more than one sections, but only the
      grating section will be read.

      :param filename: The name of the file to read from
      :type filename: str


   .. py:method:: set_angles(alpha, beta)


   .. py:method:: compute_beta()


   .. py:method:: compute_angles()

      Compute the incident and diffraction angles of the grating.
      The incident angle is calculated from the diffraction angle
      using the fixed focus constant.

      :returns: * **alpha** (*float*) -- The incident angle in degrees
                * **beta** (*float*) -- The diffraction angle in degrees


   .. py:method:: diffract(*args)

      A method to diffract rays off the grating.

      :param rays: The rays to be diffracted
      :type rays: list

      :returns: **diffracted_rays** -- A list of diffracted rays
      :rtype: list


   .. py:method:: calc_beta(alpha, line_density, energy, order)
      :staticmethod:

      Calculate the diffraction angle beta from the incident angle alpha.

      :param alpha: The incident angle in degrees
      :type alpha: float
      :param line_density: The line density of the grating in lines per mm
      :type line_density: float
      :param energy: The energy of the incident beam in eV
      :type energy: float
      :param order: The diffraction order of the grating
      :type order: int

      :returns: **beta** -- The diffraction angle in degrees
      :rtype: float


   .. py:method:: wavelength(energy)


   .. py:method:: compute_corners()


   .. py:method:: reflect(*args)

      A method to reflect rays off the grating.

      :param \*args: The rays to be reflected
      :type \*args: Ray3D

      :returns: **reflected_rays** -- A list of reflected rays
      :rtype: list


   .. py:method:: grating_from_file(filename)
      :classmethod:

      Create a grating from a file.
      See config_pgm.ini for an example.
      A config_file may contain more than one sections, but only the
      grating section will be read.

      :param filename: The name of the file to read from
      :type filename: str



